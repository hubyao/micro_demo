// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user/user.proto

package mu_micro_book_user_srv_service

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	// user
	GetFromUid(ctx context.Context, in *GetFromUidReq, opts ...client.CallOption) (*GetFromUidRsp, error)
	GetFromPhone(ctx context.Context, in *GetFromPhoneReq, opts ...client.CallOption) (*GetFromPhoneRsp, error)
	AddUser(ctx context.Context, in *AddUserReq, opts ...client.CallOption) (*AddUserRsp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*UpdateUserRsp, error)
	// token
	GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...client.CallOption) (*GenerateTokenRsp, error)
	ParseToken(ctx context.Context, in *ParseTokenReq, opts ...client.CallOption) (*ParseTokenRsp, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetFromUid(ctx context.Context, in *GetFromUidReq, opts ...client.CallOption) (*GetFromUidRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetFromUid", in)
	out := new(GetFromUidRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetFromPhone(ctx context.Context, in *GetFromPhoneReq, opts ...client.CallOption) (*GetFromPhoneRsp, error) {
	req := c.c.NewRequest(c.name, "User.GetFromPhone", in)
	out := new(GetFromPhoneRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) AddUser(ctx context.Context, in *AddUserReq, opts ...client.CallOption) (*AddUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.AddUser", in)
	out := new(AddUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...client.CallOption) (*UpdateUserRsp, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUser", in)
	out := new(UpdateUserRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GenerateToken(ctx context.Context, in *GenerateTokenReq, opts ...client.CallOption) (*GenerateTokenRsp, error) {
	req := c.c.NewRequest(c.name, "User.GenerateToken", in)
	out := new(GenerateTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ParseToken(ctx context.Context, in *ParseTokenReq, opts ...client.CallOption) (*ParseTokenRsp, error) {
	req := c.c.NewRequest(c.name, "User.ParseToken", in)
	out := new(ParseTokenRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// user
	GetFromUid(context.Context, *GetFromUidReq, *GetFromUidRsp) error
	GetFromPhone(context.Context, *GetFromPhoneReq, *GetFromPhoneRsp) error
	AddUser(context.Context, *AddUserReq, *AddUserRsp) error
	UpdateUser(context.Context, *UpdateUserReq, *UpdateUserRsp) error
	// token
	GenerateToken(context.Context, *GenerateTokenReq, *GenerateTokenRsp) error
	ParseToken(context.Context, *ParseTokenReq, *ParseTokenRsp) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		GetFromUid(ctx context.Context, in *GetFromUidReq, out *GetFromUidRsp) error
		GetFromPhone(ctx context.Context, in *GetFromPhoneReq, out *GetFromPhoneRsp) error
		AddUser(ctx context.Context, in *AddUserReq, out *AddUserRsp) error
		UpdateUser(ctx context.Context, in *UpdateUserReq, out *UpdateUserRsp) error
		GenerateToken(ctx context.Context, in *GenerateTokenReq, out *GenerateTokenRsp) error
		ParseToken(ctx context.Context, in *ParseTokenReq, out *ParseTokenRsp) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) GetFromUid(ctx context.Context, in *GetFromUidReq, out *GetFromUidRsp) error {
	return h.UserHandler.GetFromUid(ctx, in, out)
}

func (h *userHandler) GetFromPhone(ctx context.Context, in *GetFromPhoneReq, out *GetFromPhoneRsp) error {
	return h.UserHandler.GetFromPhone(ctx, in, out)
}

func (h *userHandler) AddUser(ctx context.Context, in *AddUserReq, out *AddUserRsp) error {
	return h.UserHandler.AddUser(ctx, in, out)
}

func (h *userHandler) UpdateUser(ctx context.Context, in *UpdateUserReq, out *UpdateUserRsp) error {
	return h.UserHandler.UpdateUser(ctx, in, out)
}

func (h *userHandler) GenerateToken(ctx context.Context, in *GenerateTokenReq, out *GenerateTokenRsp) error {
	return h.UserHandler.GenerateToken(ctx, in, out)
}

func (h *userHandler) ParseToken(ctx context.Context, in *ParseTokenReq, out *ParseTokenRsp) error {
	return h.UserHandler.ParseToken(ctx, in, out)
}
